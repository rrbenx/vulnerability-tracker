
# Telegram api: https://core.telegram.org/bots/api
# vul-db api: https://vuldb.com/?doc.api

import requests
import copy
import lxml.html as lh
import os



#vuldb section
api_key = "<vuldb api key>"
url = "https://vuldb.com/?api"
navigate_to = "https://vuldb.com/?id."

#enigmasoft section
threats_url = "https://www.enigmasoftware.com/threat-database/"
xpath_pattern = "//*[@id=\"content\"]/div/table[1]/tr"
xpath_titles = "//*[@id=\"content\"]/div/table[1]/tr/td[1]/div/a/b"
xpath_href = "//*[@id=\"content\"]/div/table[1]/tr/td[1]/div/a"
xpath_level = "//*[@id=\"content\"]/div/table[1]/tr/td[2]/img"
navigate_to_virus = "https://www.enigmasoftware.com/"

#telegram section
telegram_url = "https://api.telegram.org/bot##bot_token##/sendMessage?chat_id=##chat_id##&text=##text##"
bot_token = "<bot token id>"
chat_id = "<chat id>"

params = {
    "apikey": api_key
}

search_terms = [
    "windows 10",
    "windows 7",
    "windows server",
    "microsoft office",
    "microsoft outlook",
    "microsoft word",
    "microsoft access",
    "microsoft excel",
    "microsoft powerpoint",
    "microsoft power point",
    "python",
    "pycharm"
]

saved_ids = []
current_ids = []
sent_ids = []

def get_threats_data():
    r = requests.get(threats_url)
    data = r.text
    doc = lh.fromstring(data)
    tr_elements = doc.xpath(xpath_titles)
    tr_elements_hr = doc.xpath(xpath_href)
    tr_elements_level = doc.xpath(xpath_level)

    ncount = 0
    threats = []
    for irow in range(0, len(tr_elements)):
        if ncount > 0:
            title = tr_elements[irow]
            hr = tr_elements_hr[irow].attrib["href"]
            priority = tr_elements_level[irow].attrib["alt"]
            threats.append([title.text, hr, priority])

        ncount += 1

    return threats

def get_recent_data():
    custom_params = copy.deepcopy(params)
    custom_params["recent"] = "50"  # 50: max number of results
    r = requests.post(url=url, data=custom_params)
    ret = r.json()
    return ret


def get_search_data(search):
    custom_params = copy.deepcopy(params)
    custom_params["search"] = search
    r = requests.post(url=url, data=custom_params)
    ret = r.json()
    return ret

def send_telegram_msj(text):
    custom_url = copy.deepcopy(telegram_url)
    custom_url = custom_url.replace("##bot_token##", bot_token)
    custom_url = custom_url.replace("##chat_id##", chat_id)
    custom_url = custom_url.replace("##text##", text)
    r = requests.post(url=custom_url)

def contains_terms(item, terms):
    for term in terms:
        tokenized_terms = term.split(" ")

        all_terms = True
        for tterm in tokenized_terms:
            if not tterm.upper() in item.upper():
                all_terms = False

        if all_terms:
            return True

    return False

def load_saved_ids():
    with open("saved_ids", "r") as fids:
        for line in fids:
            saved_ids.append(line.replace("\n", ""))

def save_ids(used_ids, all_ids):
    with open("saved_ids", "w") as fids:
        for line in used_ids:
            fids.write(line + "\n")
        for line in all_ids:
            if line in saved_ids:
                fids.write(line + "\n")


threats = get_threats_data()

load_saved_ids()

data = get_recent_data()
print("Recent vulnerabilities")
for entry in data["result"]:
    current_ids.append(entry["entry"]["id"])
    if contains_terms(entry["entry"]["title"], search_terms) and entry["entry"]["id"] not in saved_ids:
        sent_ids.append(entry["entry"]["id"])
        text_to_send = entry["entry"]["title"]
        prefix = ""
        if entry["vulnerability"]["risk"]["value"] == "1":
            prefix = "%F0%9F%98%B0 [low]"
        if entry["vulnerability"]["risk"]["value"] == "2":
            prefix = "%F0%9F%98%B1 [med]"
        if entry["vulnerability"]["risk"]["value"] >= "3":
            prefix = "%F0%9F%92%80 [high]"
        send_telegram_msj(prefix + entry["entry"]["title"] + " " + navigate_to + entry["entry"]["id"])
    print(str(entry))

print("Recent threats")
for entry in threats:
    current_ids.append(entry[0])
    if entry[0] not in saved_ids:
        sent_ids.append(entry[0])
        prefix = "%F0%9F%90%B2 "
        send_telegram_msj(prefix + " [" + entry[2] + "] " + entry[0] + " " + navigate_to_virus + entry[1])

    print(str(entry))

save_ids(sent_ids, current_ids)

